/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PostPathlessImport } from './routes/post/_pathless'
import { Route as PostPathlessIndexImport } from './routes/post/_pathless.index'
import { Route as PostPathlessPostIdEditImport } from './routes/post/_pathless.$postId.edit'

// Create Virtual Routes

const PostImport = createFileRoute('/post')()

// Create/Update Routes

const PostRoute = PostImport.update({
  path: '/post',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostPathlessRoute = PostPathlessImport.update({
  id: '/_pathless',
  getParentRoute: () => PostRoute,
} as any)

const PostPathlessIndexRoute = PostPathlessIndexImport.update({
  path: '/',
  getParentRoute: () => PostPathlessRoute,
} as any)

const PostPathlessPostIdEditRoute = PostPathlessPostIdEditImport.update({
  path: '/$postId/edit',
  getParentRoute: () => PostPathlessRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/post': {
      id: '/post'
      path: '/post'
      fullPath: '/post'
      preLoaderRoute: typeof PostImport
      parentRoute: typeof rootRoute
    }
    '/post/_pathless': {
      id: '/post/_pathless'
      path: '/post'
      fullPath: '/post'
      preLoaderRoute: typeof PostPathlessImport
      parentRoute: typeof PostRoute
    }
    '/post/_pathless/': {
      id: '/post/_pathless/'
      path: '/'
      fullPath: '/post/'
      preLoaderRoute: typeof PostPathlessIndexImport
      parentRoute: typeof PostPathlessImport
    }
    '/post/_pathless/$postId/edit': {
      id: '/post/_pathless/$postId/edit'
      path: '/$postId/edit'
      fullPath: '/post/$postId/edit'
      preLoaderRoute: typeof PostPathlessPostIdEditImport
      parentRoute: typeof PostPathlessImport
    }
  }
}

// Create and export the route tree

interface PostPathlessRouteChildren {
  PostPathlessIndexRoute: typeof PostPathlessIndexRoute
  PostPathlessPostIdEditRoute: typeof PostPathlessPostIdEditRoute
}

const PostPathlessRouteChildren: PostPathlessRouteChildren = {
  PostPathlessIndexRoute: PostPathlessIndexRoute,
  PostPathlessPostIdEditRoute: PostPathlessPostIdEditRoute,
}

const PostPathlessRouteWithChildren = PostPathlessRoute._addFileChildren(
  PostPathlessRouteChildren,
)

interface PostRouteChildren {
  PostPathlessRoute: typeof PostPathlessRouteWithChildren
}

const PostRouteChildren: PostRouteChildren = {
  PostPathlessRoute: PostPathlessRouteWithChildren,
}

const PostRouteWithChildren = PostRoute._addFileChildren(PostRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/post': typeof PostPathlessRouteWithChildren
  '/post/': typeof PostPathlessIndexRoute
  '/post/$postId/edit': typeof PostPathlessPostIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/post': typeof PostPathlessIndexRoute
  '/post/$postId/edit': typeof PostPathlessPostIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/post': typeof PostRouteWithChildren
  '/post/_pathless': typeof PostPathlessRouteWithChildren
  '/post/_pathless/': typeof PostPathlessIndexRoute
  '/post/_pathless/$postId/edit': typeof PostPathlessPostIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/post' | '/post/' | '/post/$postId/edit'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/post' | '/post/$postId/edit'
  id:
    | '__root__'
    | '/'
    | '/post'
    | '/post/_pathless'
    | '/post/_pathless/'
    | '/post/_pathless/$postId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PostRoute: typeof PostRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PostRoute: PostRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/post"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/post": {
      "filePath": "post",
      "children": [
        "/post/_pathless"
      ]
    },
    "/post/_pathless": {
      "filePath": "post/_pathless.tsx",
      "parent": "/post",
      "children": [
        "/post/_pathless/",
        "/post/_pathless/$postId/edit"
      ]
    },
    "/post/_pathless/": {
      "filePath": "post/_pathless.index.tsx",
      "parent": "/post/_pathless"
    },
    "/post/_pathless/$postId/edit": {
      "filePath": "post/_pathless.$postId.edit.tsx",
      "parent": "/post/_pathless"
    }
  }
}
ROUTE_MANIFEST_END */
